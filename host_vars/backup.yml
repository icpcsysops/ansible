---
# used by config.pl used by sh.do_startbackup
contest_ids:
  - systest1
ntp_servers:
  - 172.29.1.20
  - 10.3.3.209
  - 10.3.3.211
ntp_pool:
  - 0.ubuntu.pool.ntp.org
  - 1.ubuntu.pool.ntp.org
  - 2.ubuntu.pool.ntp.org
  - 3.ubuntu.pool.ntp.org
# We don't do extra nic configs at NAC
extra_nic_configs: []
# extra_nic_configs:
#   # blue
#   - gateway: false
#     address: 10.3.3.210/24
#     ifc_name: enp0s31f6
#     routes:
#       - { network: 10.0.0.0/8, via: 10.3.3.254 }
#   # green
#   - gateway: 172.29.0.1
#     address: 172.29.1.210/22
#     ifc_name: enx0050b623c335
#     routes: []
#   # red
#   - gateway: false
#     address: 172.24.0.100/24
#     ifc_name: enx0050b623c699
#     routes: []

# script server config below here:
script_server_url: roles/script_server/files/script-server.zip

script_server_admin_users: &admin_users
  # hostnames or ips
  - backup
  - 127.0.0.1
  - packages

script_server_commands:
  - name: run-lastminute
    description: Runs lastminute.yml
    group: ansible # for organization in script-server
    content: |
      #!/usr/bin/bash -ex
      cd /root/ansible
      fast-ansible-playbook --limit "$PARAM_HOSTNAME" lastminute.yml
    parameters:
      - name: hostname
        env_var: PARAM_HOSTNAME
        type: text
        # audit_name comes from here: https://github.com/bugy/script-server/blob/bbb558510ed0758794d1f6c37c3964c4befbc1b8/src/utils/audit_utils.py#L58
        # tl;dr: it's the first found value in [AUTH_USERNAME, PROXIED_USERNAME, PROXIED_HOSTNAME, PROXIED_IP, HOSTNAME, IP]
        # Proxy IP comes from X-forwarded-for or x-real-ip headers
        # Proxied username is actually just basic auth (but ignoring the credentials part of it?)
        default: ${auth.audit_name}
        constant: true
        required: true

  - name: run-windows_lastminute
    description: Runs windows_lastminute.yml
    group: ansible # for organization in script-server
    content: |
      #!/usr/bin/bash -ex
      cd /root/ansible
      fast-ansible-playbook --limit "$PARAM_HOSTNAME" windows_lastminute.yml
    parameters:
      - name: hostname
        env_var: PARAM_HOSTNAME
        type: text
        default: ${auth.audit_name}
        constant: true
        required: true

  - name: refresh-git
    description: Update git on the CDS
    group: cds
    allowed_users: &cds_allowed_users
      - cds # cds host
      - green-presadmin1
      - cdsadmin1
      - cdsadmin2
      - cdsadmin3
    content: |
      #!/usr/bin/bash -ex
      ssh root@cds "bash -ec 'set -x; cd /mnt/cds/cds/contest_repo && sudo -u cds git pull'"
    parameters: []

  - name: status-cds
    description: Show service status of cds instances
    group: cds
    allowed_users: *cds_allowed_users
    content: |
      #!/usr/bin/bash -ex
      if [[ $CDS_INSTANCE == "all" ]]; then
        CDS_INSTANCE="cds p100 live"
      fi
      for x in $CDS_INSTANCE; do
        ssh root@cds systemctl status $CDS_INSTANCE
      done
    parameters:
      - name: instance
        env_var: CDS_INSTANCE
        type: multiselect
        required: true
        separator: ' '
        values: &cds_instances
          - all
          - cds
          - p100
          - live

  - name: restart-cds
    description: Restarts cds instances
    group: cds
    allowed_users: *cds_allowed_users
    content: |
      #!/usr/bin/bash -ex
      if [[ $CDS_INSTANCE == "all" ]]; then
        CDS_INSTANCE="cds p100 live"
      fi
      # Stop all the CDS instances
      for x in $CDS_INSTANCE; do
        ssh root@cds systemctl stop $x
      done
      # Clear the cache if necessary
      if [[ $CLEAR_CACHE == "true" ]]; then
        ssh root@cds 'bash -c "rm --verbose -rf /tmp/org.icpc.tools.cache.*"'
      fi
      # Start the CDS instances
      for x in $CDS_INSTANCE; do
        ssh root@cds systemctl start $x
      done
    parameters:
      - name: instance
        env_var: CDS_INSTANCE
        type: multiselect
        required: true
        separator: ' '
        values: *cds_instances
      - name: Clear cache?
        env_var: CLEAR_CACHE
        no_value: true
        description: "Clear cache directories (/tmp/org.icpc.tools.cache.*)?"

  - name: show-config
    description: Shows the currently applied config for the selected cds instance
    group: cds
    allowed_users: *cds_allowed_users
    content: |
      #!/usr/bin/bash -e
      if [[ $CDS_INSTANCE == "all" ]]; then
        CDS_INSTANCE="cds p100 live"
      fi
      for x in $CDS_INSTANCE; do
        echo "cdsConfig.xml for $x"
        echo "======================================================="
        ssh root@cds cat /srv/cds/wlp/usr/servers/$x/config/cdsConfig.xml
        echo ""
        echo ""
      done
    parameters:
      - name: instance
        env_var: CDS_INSTANCE
        type: multiselect
        required: true
        separator: ' '
        values: *cds_instances
  - name: cds-logs
    description: Tails the cds log file for 5 minutes
    group: cds
    allowed_users: *cds_allowed_users
    content: |
      #!/usr/bin/bash -e
      extra_args=""
      if [[ $FOLLOW_LOG == "true" ]]; then
        extra_args="-f"
      fi
      ssh root@cds timeout 5m tail -n $NUM_LINES $extra_args /var/lib/cds/$CDS_INSTANCE/logs/messages.log
    parameters:
      - name: How many lines?
        env_var: NUM_LINES
        type: int
        required: true
        default: 100
      - name: instance
        env_var: CDS_INSTANCE
        type: list
        required: true
        default: cds
        values:
          - cds
          - live
          - p100
      - name: Follow log?
        env_var: FOLLOW_LOG
        no_value: true
        description: "Follow the log file until stopped (or 5 minutes)"

  - name: p100-logs
    description: Fetch the p100 log file for a given team
    group: cds
    allowed_users: *cds_allowed_users
    content: |
      #!/usr/bin/bash -e
      cmd="bash -c 'tail -n$NUM_LINES \$(ls -t /p/logs/*.log | head -n1)'"
      ssh root@team$TEAM_NUM "$cmd"
    parameters:
      - name: Team number?
        env_var: TEAM_NUM
        type: int
        required: true
        default: 36
      - name: How many lines?
        env_var: NUM_LINES
        type: int
        required: true
        default: 250

  - name: cds-windows_lastminute
    description: Runs the ansible playbook windows_lastminute.yml (against cds resources)
    group: ansible
    allowed_users: *cds_allowed_users
    content: |
      #!/usr/bin/bash -ex
      cd /root/ansible
      fast-ansible-playbook --limit "$HOST_PATTERN" windows_lastminute.yml
    parameters:
      - name: host_pattern
        env_var: HOST_PATTERN # default is same as name
        separator: ','
        type: multiselect
        required: true
        values:
          - presentation_clients
          - presentation_admins
          - green-presclient1
          - green-presclient2
          - green-presclient3
          - green-presclient4
          - green-presclient5
          - green-presclient6
          - green-presclient7
          - green-presclient8

  - name: cds-windows_clear-cache
    description: Clear cache and reboots on windows presentation client
    group: cds
    allowed_users: *cds_allowed_users
    content: |
      #!/usr/bin/bash -ex
      cd /root/ansible
      fast-ansible -m ansible.windows.win_shell -a 'stop-process -name "java" -force' $HOST_PATTERN
      fast-ansible -m ansible.windows.win_shell -a "rm -force -r c:/users/icpc/appdata/local/temp/org.icpc*" $HOST_PATTERN
      fast-ansible -m ansible.windows.win_reboot $HOST_PATTERN
    parameters:
      - name: host_pattern
        env_var: HOST_PATTERN # default is same as name
        separator: ','
        type: multiselect
        required: true
        values:
          - presentation_admins
          - presentation_clients
          - green-presclient1
          - green-presclient2
          - green-presclient3
          - green-presclient4
          - green-presclient5
          - green-presclient6
          - green-presclient7
          - green-presclient8

  - name: cds-lastminute
    description: Runs the ansible playbook lastminute.yml (against cds resources)
    group: ansible
    allowed_users: *cds_allowed_users
    content: |
      #!/usr/bin/bash -ex
      cd /root/ansible
      fast-ansible-playbook --limit "$HOST_PATTERN" lastminute.yml
    parameters:
      - name: host_pattern
        env_var: HOST_PATTERN # default is same as name
        separator: ','
        type: multiselect
        required: true
        values:
          - cds

  - name: pc2-lastminute
    description: Runs the ansible playbook lastminute.yml (against pc2 resources)
    group: ansible
    allowed_users: &pc2_allowed_users
      - pc2-ccsadmin1
      - pc2-ccsadmin2
      - pc2-ccsadmin3
      - pc2-ccsadmin4
    content: |
      #!/usr/bin/bash -ex
      cd /root/ansible
      fast-ansible-playbook --limit "$HOST_PATTERN" lastminute.yml
    parameters:
      - name: host_pattern
        env_var: HOST_PATTERN # default is same as name
        separator: ','
        type: multiselect
        required: true
        values:
          - pc2
          - pc2backup
          - pc2-aj*
          - pc2-ccsadmin*
          - pc2-aj1
          - pc2-aj2
          - pc2-aj3
          - pc2-aj4
          - pc2-aj5
          - pc2-aj6
          - pc2-aj7
          - pc2-aj8
          - pc2-aj9
          - pc2-aj10
          - pc2-ccsadmin1
          - pc2-ccsadmin2
          - pc2-ccsadmin3
          - pc2-ccsadmin4

  - name: domjudge-lastminute
    description: Runs the ansible playbook lastminute.yml (against domjudge resources)
    group: ansible
    allowed_users: &domjudge_ccsadmin
      - domjudge-ccsadmin1
      - domjudge-ccsadmin2
      - domjudge-ccsadmin3
      - domjudge-ccsadmin4
      - domjudge-ccsadmin5
      - domjudge-ccsadmin6
      - domjudge-ccsadmin7
      - domjudge-ccsadmin8
    content: |
      #!/usr/bin/bash -ex
      cd /root/ansible
      fast-ansible-playbook --limit "$HOST_PATTERN" lastminute.yml
    parameters:
      - name: host_pattern
        env_var: HOST_PATTERN # default is same as name
        separator: ','
        type: multiselect
        required: true
        values: &domjudge_systems
          - domjudge-judgehost*
          - domjudge-ccsadmin*
          - domjudge
          - emergency
          - domjudge_analysts
          - green-judge*

          # These two are "virtual" ips
          # - domjudge-1 domserver-1
          # - domjudge-2 domserver-2
          - domjudge-1
          - domjudge-2
          - emergency
          - domjudge-ccsadmin1
          - domjudge-ccsadmin2
          - domjudge-ccsadmin3
          - domjudge-ccsadmin4
          - domjudge-ccsadmin5
          - domjudge-ccsadmin6
          - domjudge-ccsadmin7
          - domjudge-ccsadmin8

          # Individual judgehosts
          - domjudge-judgehost1
          - domjudge-judgehost2
          - domjudge-judgehost3
          - domjudge-judgehost4
          - domjudge-judgehost5
          - domjudge-judgehost6
          - domjudge-judgehost7
          - domjudge-judgehost8
          - domjudge-judgehost9
          - domjudge-judgehost10
          - domjudge-judgehost11
          - domjudge-judgehost12
          - domjudge-judgehost13
          - domjudge-judgehost14
          - domjudge-judgehost15
          - domjudge-judgehost16
          - domjudge-judgehost17
          - domjudge-judgehost18
          - domjudge-judgehost19
          - domjudge-judgehost20
          - domjudge-judgehost21
          - domjudge-judgehost22
          - domjudge-judgehost23
          - domjudge-judgehost24
          # - domjudge-judgehost25
          # - domjudge-judgehost26
          # - domjudge-judgehost27
          # - domjudge-judgehost28
          # - domjudge-judgehost29
          # - domjudge-judgehost30
          # - domjudge-judgehost31
          # - domjudge-judgehost32

          - analysts-green
          - green-judgehost1
          - green-judgehost2
          - green-judgehost3
          - green-judgehost4
          - green-judgehost5
          - green-judgehost6

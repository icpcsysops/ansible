---


- name: Install dependencies
  ansible.builtin.apt:
    state: present
    install_recommends: false
    pkg:
      - nginx
      - prometheus
      - prometheus-blackbox-exporter

- name: Make sure blackbox exporter is allowed to ping things
  ansible.posix.sysctl:
    name: net.ipv4.ping_group_range
    value: '0 65536'
    state: present
    sysctl_file: /etc/sysctl.d/99-blackbox-exporter-ping.conf

# Setup Prometheus, which scrapes all metrics from the monitored machines
# The client exposes the metrics (on different ports/URIs) and we collect those
- name: Set up prometheus scrapes
  ansible.builtin.template:
    src: prometheus.yml.j2
    dest: /etc/prometheus/prometheus.yml
    mode: "0644"
    owner: root
    group: root
  notify: Restart prometheus

- name: Start prometheus service
  ansible.builtin.service:
    name: prometheus
    state: started
    enabled: true

# Setup loki which gathers our logs
- name: Install loki
  ansible.builtin.unarchive:
    src: https://github.com/grafana/loki/releases/download/v2.5.0/loki-linux-amd64.zip
    dest: /usr/bin/
    remote_src: true
    owner: domjudge
    group: domjudge
  when: loki

- name: Dir for loki settings
  ansible.builtin.file:
    state: directory
    path: /etc/grafana/loki/
    owner: root
    group: root
    mode: "0755"
  when: loki

- name: Set loki settings
  ansible.builtin.copy:
    src: loki-local-config.yaml
    dest: /etc/grafana/loki/
    owner: root
    group: root
    mode: "0644"
  when: loki
  notify: Restart loki

- name: Setup loki systemd
  ansible.builtin.copy:
    src: loki.service
    dest: /etc/systemd/system/
    mode: "0655"
  when: loki
  notify: Restart loki

- name: Start loki service
  ansible.builtin.service:
    name: loki
    state: started
    enabled: true
  when: loki

## Setup grafana
- name: Install grafana
  ansible.builtin.apt:
    name: grafana-enterprise
    state: present
  notify: Restart grafana

- name: Configure grafana
  ansible.posix.synchronize:
    src: files/grafana/environment
    dest: /etc/default/grafana-server
  notify: Restart grafana

- name: Set up grafana datasources
  ansible.posix.synchronize:
    src: files/grafana/datasources.yml
    dest: /etc/grafana/provisioning/datasources/default.yml
  notify: Restart grafana

- name: Set up grafana dashboards
  ansible.posix.synchronize:
    src: files/grafana/dashboards.yml
    dest: /etc/grafana/provisioning/dashboards/default.yml
  notify: Restart grafana

- name: Copy grafana dashboards
  ansible.posix.synchronize:
    src: dashboards/
    dest: /etc/grafana/dashboards/
  notify: Restart grafana

- name: Start grafana service
  ansible.builtin.service:
    name: grafana-server
    state: started
    enabled: true

- name: Dump grafana cert if found
  ansible.builtin.copy:
    content: "{{ grafana_ssl_cert }}"
    dest: /etc/ssl/certs/grafana.crt
    mode: "0644"
  when: grafana_ssl_cert is defined
  notify: Restart nginx

- name: Dump grafana key if found
  ansible.builtin.copy:
    content: "{{ grafana_ssl_key }}"
    dest: /etc/ssl/private/grafana.key
    mode: "0644"
  when: grafana_ssl_cert is defined
  notify: Restart nginx

# Setup nginx with selfsigned certificate
- name: Copy ssl cert
  ansible.builtin.copy:
    src: /etc/ssl/certs/ssl-cert-snakeoil.pem
    dest: /etc/ssl/certs/grafana.crt
    mode: "0644"
    remote_src: true
  when: grafana_ssl_cert is not defined
  notify: Restart nginx

- name: Copy ssl key
  ansible.builtin.copy:
    src: /etc/ssl/private/ssl-cert-snakeoil.key
    dest: /etc/ssl/private/grafana.key
    mode: "0600"
    remote_src: true
  when: grafana_ssl_key is not defined
  notify: Restart nginx

- name: Remove default nginx config
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: Copy default nginx config
  ansible.builtin.template:
    src: nginx.conf.j2
    dest: /etc/nginx/sites-enabled/grafana.conf
    owner: root
    group: root
    mode: "0644"
  notify: Restart nginx

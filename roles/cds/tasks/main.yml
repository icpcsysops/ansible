---
- name: Create cds user
  ansible.builtin.user:
    name: cds
    home: /srv/cds
    shell: "/usr/bin/bash"

- name: Make sure the .ssh directory exists
  ansible.builtin.file:
    path: /srv/cds/.ssh
    state: directory
    mode: "0700"
    owner: cds
    group: cds

- name: Give cds user the root authorized_keys2
  ansible.builtin.copy:
    src: /root/.ssh/authorized_keys2
    dest: /srv/cds/.ssh/authorized_keys2
    owner: cds
    group: cds
    mode: '0644'

- name: Ensure id_ed25519 key for cds@cds
  community.crypto.openssh_keypair:
    path: /srv/cds/.ssh/id_ed25519
    type: ed25519
    owner: cds
    group: cds

- name: Disable strict host key checking for the cds user
  ansible.builtin.copy:
    content: |
      Host *
        StrictHostKeyChecking no
    dest: /srv/cds/.ssh/config
    owner: cds
    group: cds
    mode: "0644"

- name: Create CDS directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: cds
    group: cds
    mode: '0755'
  with_items:
    - /srv/cds
    - /var/lib/cds


# Get the cds_version from github if the version specified is 'latest'
- name: Get the CDS release
  delegate_to: localhost
  ansible.builtin.uri:
    url: https://api.github.com/repos/icpctools/icpctools/releases?per_page=1
    headers: "{{ github_headers }}"
    method: GET
    return_content: true
    status_code: 200
    body_format: json
  register: latest_cds_release_array
  check_mode: false
  when: cds_version == "latest"
- name: Set CDS latest version
  ansible.builtin.set_fact:
    cds_version: "{{ latest_cds_release_array.json[0].name | replace('v', '') }}"
  when: cds_version == "latest"
- name: Set CDS minor version
  ansible.builtin.set_fact:
    cds_version_minor: "{{ cds_version | regex_replace('\\.\\d+$', '') }}"

- name: Check and download the files locally if we don't have them
  block:
    - name: Check if we have wlp.CDS.zip
      delegate_to: localhost
      ansible.builtin.stat:
        path: "{{ lookup('ansible.builtin.fileglob', 'wlp.CDS-' + cds_version + '.zip', wantlist=True) | sort | last }}"
      register: wlp_cds_zip_present
      ignore_errors: true
    - name: Download wlp.CDS.zip
      delegate_to: localhost
      ansible.builtin.get_url:
        url: https://github.com/icpctools/icpctools/releases/download/v{{ cds_version }}/wlp.CDS-{{ cds_version }}.zip
        dest: "{{ inventory_dir }}/files/wlp.CDS-{{ cds_version }}.zip"
        mode: "0644"
      when: wlp_cds_zip_present.failed

    - name: Check if we have CDS.zip
      delegate_to: localhost
      ansible.builtin.stat:
        path: "{{ lookup('ansible.builtin.fileglob', 'CDS-' + cds_version + '.zip', wantlist=True) | sort | last }}"
      register: cds_zip_present
      ignore_errors: true
    - name: Download CDS.zip
      delegate_to: localhost
      ansible.builtin.get_url:
        url: https://github.com/icpctools/icpctools/releases/download/v{{ cds_version }}/CDS-{{ cds_version }}.zip
        dest: "{{ inventory_dir }}/files/CDS-{{ cds_version }}.zip"
        mode: "0644"
      when: cds_zip_present.failed


- name: Check if wlp.CDS is installed
  ansible.builtin.stat:
    path: /srv/cds/wlp/usr/servers
  register: wlp_cds_pkg_installed
  check_mode: false

- name: Download and unpack full CDS if it doesn't exist
  ansible.builtin.unarchive:
    src: files/wlp.CDS-{{ cds_version }}.zip
    dest: /srv/cds
    owner: cds
    group: cds
  when: not wlp_cds_pkg_installed.stat.exists

- name: Create a directory for this version of the CDS.war
  ansible.builtin.file:
    state: directory
    path: /srv/cdspackages/{{ cds_version }}
    mode: "0755"
- name: Download and unpack CDS war to /srv/cdspackages
  ansible.builtin.unarchive:
    src: files/CDS-{{ cds_version }}.zip
    dest: /srv/cdspackages/{{ cds_version }}
    creates: /srv/cdspackages/{{ cds_version }}/CDS-{{ cds_version_minor }}/CDS.war
    owner: cds
    group: cds
    mode: "0644"

- name: Make sure /srv/cds/CDS.war is a symlink to the correct cds version
  ansible.builtin.file:
    src: /srv/cdspackages/{{ cds_version }}/CDS-{{ cds_version_minor }}/CDS.war
    dest: /srv/cds/CDS.war
    state: link
    force: true
  register: updated_war

- name: Make sure the cds directory exists
  ansible.builtin.file:
    path: /mnt/{{ ansible_hostname }}/cds
    state: directory
    mode: '0755'
    owner: cds
    group: cds

- name: Check if CDS repo is cloned already
  ansible.builtin.stat:
    path: /mnt/{{ ansible_hostname }}/cds/contest_repo
  register: cds_repo_cloned
    # check_mode: false

- name: Clone the contest repo
  become: true
  become_user: cds
  ansible.builtin.git: # noqa: latest[git]
    repo: "{{ cds_contest_git_repo }}"
    dest: /mnt/{{ ansible_hostname }}/cds/contest_repo
  when: not cds_repo_cloned.stat.exists

- name: Create contests config directory
  ansible.builtin.file:
    path: /srv/cds/contests
    state: directory
    owner: cds
    group: cds
    mode: '0755'

- name: Include cds_instance yaml now
  ansible.builtin.include_tasks: cds_instance.yml
  vars:
    cds_name: "{{ outeritem.key }}"
    cds_instance: "{{ outeritem.value }}"
    needs_restart: updated_war.changed
  with_dict: "{{ cds_config }}"
  loop_control:
    loop_var: outeritem
